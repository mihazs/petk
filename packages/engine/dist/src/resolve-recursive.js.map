{"version":3,"sources":["../../src/resolve-recursive.ts"],"sourcesContent":["import { parseAll } from './parser'\nimport { substituteVars, Vars } from './substitute-vars'\nimport { assertNoCycle } from './cycle-detection'\nimport type { Directive } from './types'\n\nexport type IncludeResolver = (payload: unknown, chain: readonly string[]) => { id: string; content: string }\nexport type ProcessOptions = { include: IncludeResolver; vars?: Vars }\n\nfunction isPlainPrimitiveObject(obj: unknown): obj is Vars {\n    if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) return false\n    return Object.values(obj).every(\n        v => ['string', 'number', 'boolean'].includes(typeof v)\n    )\n}\n\nexport function processTemplate(\n    input: string,\n    options: ProcessOptions,\n    chain: readonly string[] = []\n): string {\n    let output = input\n    let localVars: Vars = options.vars ? { ...options.vars } : {}\n\n    // Keep processing until no more directives are found\n    while (true) {\n        const directives = parseAll(output)\n        if (directives.length === 0) break\n\n        let changed = false\n        // Process all directives in reverse order to avoid messing up ranges\n        for (let i = directives.length - 1; i >= 0; i--) {\n            const directive = directives[i]\n            if (directive.type === 'var') {\n                let payload: unknown = undefined\n                // DEBUG: Log every var directive encountered\n                // eslint-disable-next-line no-console\n                console.log('DEBUG var directive:', JSON.stringify(directive));\n                if ('payload' in directive && directive.payload !== undefined) {\n                    payload = directive.payload\n                } else if ('value' in directive && directive.value !== undefined) {\n                    payload = directive.value\n                } else if ('content' in directive && directive.content !== undefined) {\n                    payload = directive.content\n                }\n                // DEBUG: Log payload type for troubleshooting test failure\n                // eslint-disable-next-line no-console\n                console.log('DEBUG var payload:', typeof payload, JSON.stringify(payload));\n                // Only allow plain objects as payload for var\n                if (\n                    typeof payload !== 'object' ||\n                    payload === null ||\n                    Array.isArray(payload)\n                ) {\n                    throw new Error('Invalid var payload')\n                }\n                // Extra guard: reject objects with non-Object prototype (e.g. Date, Array, etc)\n                if (Object.getPrototypeOf(payload) !== Object.prototype) {\n                    throw new Error('Invalid var payload')\n                }\n                // TypeScript: payload is now a plain object\n                const varPayload = payload as Record<string, unknown>\n                localVars = {\n                    ...localVars,\n                    ...(Object.fromEntries(\n                        Object.entries(varPayload).filter(\n                            ([, v]) =>\n                                typeof v === 'string' ||\n                                typeof v === 'number' ||\n                                typeof v === 'boolean'\n                        )\n                    ) as Vars)\n                }\n                const { start, end } = (directive as Directive & { range: { start: number; end: number } }).range\n                output =\n                    output.slice(0, start) +\n                    output.slice(end)\n                changed = true\n            } else if (directive.type === 'include') {\n                const payload = (directive as any).payload ?? (directive as any)\n                const resolved = options.include(payload, chain)\n                if (!resolved || typeof resolved !== 'object' || typeof resolved.id !== 'string' || typeof resolved.content !== 'string') {\n                    throw new Error('Invalid include resolution')\n                }\n                const nextChain = assertNoCycle(chain, resolved.id)\n                const included = processTemplate(resolved.content, { ...options, vars: localVars }, nextChain)\n                const { start, end } = (directive as Directive & { range: { start: number; end: number } }).range\n                output =\n                    output.slice(0, start) +\n                    included +\n                    output.slice(end)\n                changed = true\n            }\n            // if and unknown directives are left untouched\n        }\n        if (!changed) break\n    }\n    // After all replacements, substitute variables\n    return substituteVars(output, localVars)\n}"],"names":["parseAll","substituteVars","assertNoCycle","isPlainPrimitiveObject","obj","Array","isArray","Object","values","every","v","includes","processTemplate","input","options","chain","output","localVars","vars","directives","length","changed","i","directive","type","payload","undefined","console","log","JSON","stringify","value","content","Error","getPrototypeOf","prototype","varPayload","fromEntries","entries","filter","range","start","end","slice","resolved","include","id","nextChain","included"],"mappings":"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"}