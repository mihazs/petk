{"version":3,"sources":["../../src/block-extractor.ts"],"sourcesContent":["import type { DirectiveType } from './types';\n\nconst DIRECTIVE_INFOS = [\n    '{petk:include}',\n    '{petk:var}',\n    '{petk:if}',\n] as const;\n\nconst INFO_TO_TYPE: Record<string, DirectiveType> = {\n    '{petk:include}': 'include',\n    '{petk:var}': 'var',\n    '{petk:if}': 'if',\n};\n\ntype Block = {\n    type: DirectiveType;\n    yaml: string;\n    start: number;\n    end: number;\n    raw: string;\n};\n\nexport function findDirectiveBlocks(input: string): Block[] {\n    const lines = input.split(/\\r?\\n/);\n    const blocks: Block[] = [];\n    let inFence = false;\n    let fenceInfo = '';\n    let type: DirectiveType | null = null;\n    let start = 0;\n    let rawLines: string[] = [];\n    let yamlLines: string[] = [];\n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        if (!inFence) {\n            for (const info of DIRECTIVE_INFOS) {\n                if (line.trim() === '```' + info) {\n                    inFence = true;\n                    fenceInfo = info;\n                    type = INFO_TO_TYPE[info];\n                    start = i;\n                    rawLines = [line];\n                    yamlLines = [];\n                    break;\n                }\n            }\n        } else {\n            if (line.trim() === '```') {\n                inFence = false;\n                rawLines.push(line);\n                blocks.push({\n                    type: type!,\n                    yaml: yamlLines.join('\\n'),\n                    start,\n                    end: i,\n                    raw: rawLines.join('\\n'),\n                });\n                fenceInfo = '';\n                type = null;\n                start = 0;\n                rawLines = [];\n                yamlLines = [];\n            } else {\n                rawLines.push(line);\n                yamlLines.push(line);\n            }\n        }\n    }\n    if (inFence) {\n        throw new Error(\n            `Unclosed directive fence starting at line ${start + 1} (${fenceInfo})`\n        );\n    }\n    return blocks;\n}"],"names":["DIRECTIVE_INFOS","INFO_TO_TYPE","findDirectiveBlocks","input","lines","split","blocks","inFence","fenceInfo","type","start","rawLines","yamlLines","i","length","line","info","trim","push","yaml","join","end","raw","Error"],"mappings":"AAEA,IAAMA,kBAAkB;IACpB;IACA;IACA;CACH;AAED,IAAMC,eAA8C;IAChD,kBAAkB;IAClB,cAAc;IACd,aAAa;AACjB;AAUA,OAAO,SAASC,oBAAoBC,KAAa;IAC7C,IAAMC,QAAQD,MAAME,KAAK,CAAC;IAC1B,IAAMC,SAAkB,EAAE;IAC1B,IAAIC,UAAU;IACd,IAAIC,YAAY;IAChB,IAAIC,OAA6B;IACjC,IAAIC,QAAQ;IACZ,IAAIC,WAAqB,EAAE;IAC3B,IAAIC,YAAsB,EAAE;IAC5B,IAAK,IAAIC,IAAI,GAAGA,IAAIT,MAAMU,MAAM,EAAED,IAAK;QACnC,IAAME,OAAOX,KAAK,CAACS,EAAE;QACrB,IAAI,CAACN,SAAS;gBACL,kCAAA,2BAAA;;gBAAL,QAAK,YAAcP,oCAAd,SAAA,6BAAA,QAAA,yBAAA,iCAA+B;oBAA/B,IAAMgB,OAAN;oBACD,IAAID,KAAKE,IAAI,OAAO,QAAQD,MAAM;wBAC9BT,UAAU;wBACVC,YAAYQ;wBACZP,OAAOR,YAAY,CAACe,KAAK;wBACzBN,QAAQG;wBACRF,WAAW;4BAACI;yBAAK;wBACjBH,YAAY,EAAE;wBACd;oBACJ;gBACJ;;gBAVK;gBAAA;;;yBAAA,6BAAA;wBAAA;;;wBAAA;8BAAA;;;;QAWT,OAAO;YACH,IAAIG,KAAKE,IAAI,OAAO,OAAO;gBACvBV,UAAU;gBACVI,SAASO,IAAI,CAACH;gBACdT,OAAOY,IAAI,CAAC;oBACRT,MAAMA;oBACNU,MAAMP,UAAUQ,IAAI,CAAC;oBACrBV,OAAAA;oBACAW,KAAKR;oBACLS,KAAKX,SAASS,IAAI,CAAC;gBACvB;gBACAZ,YAAY;gBACZC,OAAO;gBACPC,QAAQ;gBACRC,WAAW,EAAE;gBACbC,YAAY,EAAE;YAClB,OAAO;gBACHD,SAASO,IAAI,CAACH;gBACdH,UAAUM,IAAI,CAACH;YACnB;QACJ;IACJ;IACA,IAAIR,SAAS;QACT,MAAM,IAAIgB,MACN,AAAC,6CAA0Df,OAAdE,QAAQ,GAAE,MAAc,OAAVF,WAAU;IAE7E;IACA,OAAOF;AACX"}