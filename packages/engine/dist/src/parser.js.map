{"version":3,"sources":["../../src/parser.ts"],"sourcesContent":["import type { Directive } from './types';\nimport { findDirectiveBlocks } from './block-extractor';\nimport { parseDirective } from './parse-directive';\n\nexport function parseAll(input: string): Directive[] {\n    const blocks = findDirectiveBlocks(input).map(block => {\n        const directive = parseDirective(block.yaml, block.type);\n        return {\n            ...directive,\n            range: { start: block.start, end: block.end },\n            raw: block.raw,\n        };\n    });\n\n    // Add support for short-form directives: {{include:id}} and {{var:key}}\n    const shortForm: Directive[] = [];\n    const regex = /\\{\\{(include|var):([^\\}]+)\\}\\}/g;\n    let match: RegExpExecArray | null;\n    while ((match = regex.exec(input))) {\n        const [raw, type, value] = match;\n        if (type === 'include') {\n            shortForm.push({\n                type: 'include',\n                payload: value,\n                path: value,\n                range: { start: match.index, end: match.index + raw.length },\n                raw,\n            } as unknown as Directive);\n        } else if (type === 'var') {\n            // For short-form var, treat as a var directive with a single key and empty string value\n            shortForm.push({\n                type: 'var',\n                payload: { [value]: '' },\n                name: value,\n                value: '',\n                range: { start: match.index, end: match.index + raw.length },\n                raw,\n            } as unknown as Directive);\n        }\n    }\n\n    // TypeScript: downstream expects .range on all directives, so cast to any for sort\n    return ([...blocks, ...shortForm] as any[]).sort((a, b) => a.range.start - b.range.start);\n}"],"names":["findDirectiveBlocks","parseDirective","parseAll","input","blocks","map","block","directive","yaml","type","range","start","end","raw","shortForm","regex","match","exec","value","push","payload","path","index","length","name","sort","a","b"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,mBAAmB,QAAQ,oBAAoB;AACxD,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,OAAO,SAASC,SAASC,KAAa;IAClC,IAAMC,SAASJ,oBAAoBG,OAAOE,GAAG,CAACC,SAAAA;QAC1C,IAAMC,YAAYN,eAAeK,MAAME,IAAI,EAAEF,MAAMG,IAAI;QACvD,OAAO,wCACAF;YACHG,OAAO;gBAAEC,OAAOL,MAAMK,KAAK;gBAAEC,KAAKN,MAAMM,GAAG;YAAC;YAC5CC,KAAKP,MAAMO,GAAG;;IAEtB;IAEA,wEAAwE;IACxE,IAAMC,YAAyB,EAAE;IACjC,IAAMC,QAAQ;IACd,IAAIC;IACJ,MAAQA,QAAQD,MAAME,IAAI,CAACd,OAAS;QAChC,IAA2Ba,0BAAAA,WAApBH,MAAoBG,WAAfP,OAAeO,WAATE,QAASF;QAC3B,IAAIP,SAAS,WAAW;YACpBK,UAAUK,IAAI,CAAC;gBACXV,MAAM;gBACNW,SAASF;gBACTG,MAAMH;gBACNR,OAAO;oBAAEC,OAAOK,MAAMM,KAAK;oBAAEV,KAAKI,MAAMM,KAAK,GAAGT,IAAIU,MAAM;gBAAC;gBAC3DV,KAAAA;YACJ;QACJ,OAAO,IAAIJ,SAAS,OAAO;YACvB,wFAAwF;YACxFK,UAAUK,IAAI,CAAC;gBACXV,MAAM;gBACNW,SAAW,qBAACF,OAAQ;gBACpBM,MAAMN;gBACNA,OAAO;gBACPR,OAAO;oBAAEC,OAAOK,MAAMM,KAAK;oBAAEV,KAAKI,MAAMM,KAAK,GAAGT,IAAIU,MAAM;gBAAC;gBAC3DV,KAAAA;YACJ;QACJ;IACJ;IAEA,mFAAmF;IACnF,OAAO,AAAC,AAAC,qBAAGT,eAAQ,qBAAGU,YAAqBW,IAAI,CAAC,SAACC,GAAGC;eAAMD,EAAEhB,KAAK,CAACC,KAAK,GAAGgB,EAAEjB,KAAK,CAACC,KAAK;;AAC5F"}