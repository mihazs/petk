{"version":3,"sources":["../../src/substitute-vars.ts"],"sourcesContent":["export type Vars = Record<string, string | number | boolean>\n\nexport function substituteVars(input: string, vars: Vars): string {\n    if (!input || typeof input !== 'string' || !vars || typeof vars !== 'object') return input\n    // Only replace {{key}} with no spaces and exactly two braces\n    return input.replace(/(?<!{){{([a-zA-Z0-9_]+)}}(?!})/g, (match, key) =>\n        Object.prototype.hasOwnProperty.call(vars, key) ? String(vars[key]) : match\n    )\n}"],"names":["substituteVars","input","vars","replace","match","key","Object","prototype","hasOwnProperty","call","String"],"mappings":";;;;AAEA,OAAO,SAASA,eAAeC,KAAa,EAAEC,IAAU;IACpD,IAAI,CAACD,SAAS,OAAOA,UAAU,YAAY,CAACC,QAAQ,CAAA,OAAOA,qCAAP,SAAOA,KAAG,MAAM,UAAU,OAAOD;IACrF,6DAA6D;IAC7D,OAAOA,MAAME,OAAO,CAAC,+CAAmC,SAACC,OAAOC;eAC5DC,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACP,MAAMG,OAAOK,OAAOR,IAAI,CAACG,IAAI,IAAID;;AAE9E"}